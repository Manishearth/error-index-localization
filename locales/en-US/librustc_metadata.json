{
  "E0454": {
    "message": "\nA link name was given with an empty name. Erroneous code example:\n\n```ignore (cannot-test-this-because-rustdoc-stops-compile-fail-before-codegen)\n#[link(name = \"\")] extern {} // error: #[link(name = \"\")] given with empty name\n```\n\nThe rust compiler cannot link to an external library if you don't give it its\nname. Example:\n\n```no_run\n#[link(name = \"some_lib\")] extern {} // ok!\n```\n",
    "description": "E0454"
  },
  "E0455": {
    "message": "\nLinking with `kind=framework` is only supported when targeting macOS,\nas frameworks are specific to that operating system.\n\nErroneous code example:\n\n```ignore (should-compile_fail-but-cannot-doctest-conditionally-without-macos)\n#[link(name = \"FooCoreServices\", kind = \"framework\")] extern {}\n// OS used to compile is Linux for example\n```\n\nTo solve this error you can use conditional compilation:\n\n```\n#[cfg_attr(target=\"macos\", link(name = \"FooCoreServices\", kind = \"framework\"))]\nextern {}\n```\n\nSee more:\nhttps://doc.rust-lang.org/reference/attributes.html#conditional-compilation\n",
    "description": "E0455"
  },
  "E0458": {
    "message": "\nAn unknown \"kind\" was specified for a link attribute. Erroneous code example:\n\n```ignore (cannot-test-this-because-rustdoc-stops-compile-fail-before-codegen)\n#[link(kind = \"wonderful_unicorn\")] extern {}\n// error: unknown kind: `wonderful_unicorn`\n```\n\nPlease specify a valid \"kind\" value, from one of the following:\n\n* static\n* dylib\n* framework\n\n",
    "description": "E0458"
  },
  "E0459": {
    "message": "\nA link was used without a name parameter. Erroneous code example:\n\n```ignore (cannot-test-this-because-rustdoc-stops-compile-fail-before-codegen)\n#[link(kind = \"dylib\")] extern {}\n// error: #[link(...)] specified without `name = \"foo\"`\n```\n\nPlease add the name parameter to allow the rust compiler to find the library\nyou want. Example:\n\n```no_run\n#[link(kind = \"dylib\", name = \"some_lib\")] extern {} // ok!\n```\n",
    "description": "E0459"
  },
  "E0463": {
    "message": "\nA plugin/crate was declared but cannot be found. Erroneous code example:\n\n```compile_fail,E0463\n#![feature(plugin)]\n#![plugin(cookie_monster)] // error: can't find crate for `cookie_monster`\nextern crate cake_is_a_lie; // error: can't find crate for `cake_is_a_lie`\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc example). Plugins are crates as\nwell, and you link to them the same way.\n",
    "description": "E0463"
  }
}